#!/usr/bin/php
<?php
include_once 'eqecho-init.php';
include_once 'local/main.class.php';
include_once 'autoload.php';

$main = new Main([
   'debugLevel'     => 6,
   'debugType'      => DEBUG_CLI,
   'errorReporting' => false,
   'sessionStart'   => false,
   'memoryLimit'    => null,
   'sendHeaders'    => false,
   'database'       => true,
   'dbConfigDir'    => APP_CONFIGDIR,
   'dbConfigFile'   => APP_CONFIGDIR.'/db.prod.eqecho.conf',
   'fileDefine'     => APP_CONFIGDIR.'/defines.json',
   'dbDefine'       => ['PROD_%','MY_%'],
   'input'          => false,
   'html'           => false,
   'adminlte'       => false,
   'cliLongOpts'    => null,
]);

$apiOptions = ['baseUrl' => PROD_API_URL, 'authToken' => PROD_API_AUTH_TOKEN];

if (!$main->buildClass('api','MyAPI',$apiOptions,'local/myapi.class.php')) { exit; }

use Discord\DiscordCommandClient;
use Discord\Parts\Interactions\Interaction;
use Discord\Builders\MessageBuilder;
use Discord\Builders\Components\StringSelect;
use Discord\Builders\Components\Option;
use Discord\Parts\User\User;
use Discord\Parts\Channel\Message; 

// Create a $discord BOT
$discord = new DiscordCommandClient([
    'token' => MY_DISCORD_BOT_TOKEN, 
]);

$discord->listenCommand('eqereg', function (Interaction $interaction) use ($discord, $main) {
    // Ignore messages from any Bots
    if ($interaction->user->bot) return;

    $main->debug(1,sprintf("%s asked to register", $interaction->user->username));

    /** @var $api MyAPI */
    $api = $main->obj('api');

    // Need to check if the user is already registered and if so, allow them to update their credentials if they use a force command

    $result = $api->registerAccount($interaction->user->id, $interaction->user->username);

    $builder = MessageBuilder::new(); 

    if ($result === false) {
        $response = 'Error: '.$api->error();
    }
    else {
        $builder->addFileFromContent('credentials.json', json_encode($result, JSON_PRETTY_PRINT));
        $response = "Registration successful!  Please download the file below into your script directory:";        
    }

    $builder->setContent($response);

    $discord->users->fetch($interaction->user->id)
                    ->then(function (User $user) use ($builder) {
                        return $user->sendMessage($builder);
                    })
                    ->then(function (Message $sentDm) use ($main) {
                        $main->debug(0,"DM successfully sent to {$sentDm->channel->recipient->username}");
                    })
                    ->otherwise(function (\Exception $error) use ($interaction) {
                        echo "Failed to fetch user or send DM (ID: {$interaction->user->id}): {$error->getMessage()}\n";
                        // Common reasons: Invalid ID, User not found, Bot doesn't share server, DMs disabled/blocked.
                    });

    // Respond to the interaction
    $interaction->respondWithMessage(
        MessageBuilder::new()
            ->setContent("Registration request sent via DM.")
    );
});


$discord->listenCommand('eqeinfo', function (Interaction $interaction) use ($main) {
    // Ignore messages from any Bots
    if ($interaction->user->bot) return;

    $main->debug(1,sprintf("%s asked for character info", $interaction->user->username));

    /** @var $api MyAPI */
    $api = $main->obj('api');

    $characterData = $api->getCharacterData($interaction->user->id);

    $response = "Character Information:\n";

    $columnWidths = [
        'Active' => 8,
        'Name' => 15,
        'Server' => 9,
        'Level' => 9,
        'AA' => 4,
        'Powerslot Item (Percent)' => 57,
    ];

    $tableFormatList = array_map(function($width) { return "%-{$width}s"; }, array_values($columnWidths));
    $tableFormatPlus = '+'.implode('+',$tableFormatList).'+';
    $tableFormatPipe = '|'.implode('|',$tableFormatList).'|';
    $tableHeader = vsprintf($tableFormatPipe, array_map(function($item) { return " $item "; },array_keys($columnWidths)));
    $tableBorder = vsprintf($tableFormatPlus, array_map(function($width) { return str_repeat('-', $width); }, array_values($columnWidths)));

    if (empty($characterData)) {
        $response .= "```No characters found.```";
    }
    else {
        $response .= "```\n$tableBorder\n$tableHeader\n$tableBorder\n";
        foreach ($characterData as $characterKey => $characterInfo) {
            $characterActive = ($characterInfo['updated'] > time() - 900) ? 'Yes' : 'No';

            $response .= vsprintf("$tableFormatPipe\n", array_map(function($item) { return " $item "; },[
                $characterActive,
                $characterInfo['name'] ?: 'Unknown',
                $characterInfo['server'] ?: 'Unknown',
                $characterInfo['level'] ?: 'Unknown',
                $characterInfo['aa_points'] ?? 0,
                sprintf("%s (%0.2f%%)", $characterInfo['powerslot_item'] ?? 'None', $characterInfo['powerslot_percent'] ?? 0)
            ]));
        }
        $response .= "$tableBorder\n```";
    }

    // Respond to the interaction
    $interaction->respondWithMessage(
        MessageBuilder::new()
            ->setContent($response)
            ->setComponents([])
    );
});

$discord->on('init', function (DiscordCommandClient $discord) use ($main) {
    $main->debug(0,"Bot is ready!");
    $main->debug(0,"Logged in as: {$discord->user->username}#{$discord->user->discriminator}");

    /** @var $api MyAPI */
    $api = $main->obj('api');

    // --- Timer Setup ---
    // Get the ReactPHP event loop instance
    $loop = $discord->getLoop();

    // Add a timer that executes the callback every 2.0 seconds
    $timer = $loop->addPeriodicTimer(2.0, function () use ($discord, $main, $api) {
        $messageQueue = $api->getMessageQueue(); 

        if ($messageQueue) {
            $sentIds  = [];
            $promises = [];
            foreach ($messageQueue as $messageInfo) {
                $messageId      = $messageInfo['id'];
                $targetUserId   = $messageInfo['discord_id'];
                $messageContent = $messageInfo['message'];

                $promises[] = $discord->users->fetch($targetUserId)
                    ->then(function (User $user) use ($messageContent) {
                        return $user->sendMessage($messageContent);
                    })
                    ->then(function (Message $sentDm) use ($main,&$sentIds,$messageId,$messageContent) {
                        $main->debug(0,"Notified {$sentDm->channel->recipient->username}: {$messageContent}");
                        $sentIds[] = $messageId;

                    })
                    ->otherwise(function (\Exception $error) use ($targetUserId) {
                        echo "Failed to fetch user or send DM (ID: {$targetUserId}): {$error->getMessage()}\n";
                        // Common reasons: Invalid ID, User not found, Bot doesn't share server, DMs disabled/blocked.
                    });
            }

            // Wait for all promises to resolve
            \React\Promise\all($promises)->then(function () use ($api, &$sentIds) {
                if (!empty($sentIds)) {
                    $api->removeMessagesFromMessageQueue($sentIds); 
                }
            });
        }   
    });
});

// Start the Bot (must be at the bottom)
$discord->run();